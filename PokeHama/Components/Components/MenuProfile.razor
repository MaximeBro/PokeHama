@using System.Security.Claims
@using PokeHama.Services

<MudMenu Class="icon-hoverable white-all pa-1" PopoverClass="transparent" ListClass="darker-bg rounded-lg" Size="Size.Small" Icon="@Icons.AccountCircle" Style="border: 2px solid white; border-radius: 50%;" 
         AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
    <MudStack Class="pt-1" Row="false" Spacing="0">
        <div class="d-flex mx-4" style="align-items: center;">
            <MudAvatar Class="mr-2" Variant="Variant.Filled" Color="Color.Dark">P</MudAvatar>
            <div>
                <MudText Class="text-white">@_firstname @_lastname</MudText>
                <MudLink Style="text-decoration-color: #fff;" Href="/">
                    <MudText Class="text-white" Typo="Typo.caption" Style="font-size: 14px;">@_username</MudText>
                </MudLink>
            </div>
        </div>
        <MudDivider Class="my-2 mt-3" DividerType="DividerType.FullWidth" Style="border-color: #424242!important;"/>
        <MudMenuItem Class="my-0 text-white c-menu-item"><MudIcon Class="text-white mr-3" Icon="@Icons.Share" /> Partager</MudMenuItem>
        <MudMenuItem Class="my-0 text-white c-menu-item" OnClick="@(async() => await SignOutAsync())">
            <MudIcon Class="text-white mr-3" Icon="@Icons.Logout"/>
            Se d√©connecter
        </MudMenuItem>
    </MudStack>
</MudMenu>

@code {
    [Inject] public AuthenticationService AuthenticationService { get; set; } = null!;

    private ClaimsPrincipal? _user;
    private string? _firstname;
    private string? _lastname;
    private string? _username;

    protected override void OnInitialized()
    {
        _user = AuthenticationService.User;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && _user != null)
        {
            _firstname = _user.FindFirstValue("firstname");
            _lastname = _user.FindFirstValue("lastname");
            _username = $"@{_user.FindFirstValue(ClaimTypes.Surname) ?? "Inconnu"}";
        }
    }

    private async Task SignOutAsync() => await AuthenticationService.SignOutAsync();
}