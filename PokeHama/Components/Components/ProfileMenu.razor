<MudMenu Class="icon-hoverable white-all pa-1" PopoverClass="transparent" ListClass="darker-bg rounded-lg" Size="Size.Small" Icon="@Icons.AccountCircle" Style="border: 2px solid white; border-radius: 50%;" 
         AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
    <MudStack Class="pt-1" Row="false" Spacing="0">
        <div class="d-flex mx-4" style="align-items: center;">
            <MudAvatar Class="mr-2" Variant="Variant.Filled" Color="Color.Dark">
                @if (_data!.ImagePfp)
                {
                    <MudImage Src="@($"/_content/pictures/PFP/{_data!.Pfp}")" Height="50" Style="border-radius: 50%; user-select: none;"/>
                }
                else
                {
                    @(_user!.Username[0].ToString())
                }
            </MudAvatar>
            <div>
                <MudText Class="text-white">@_user!.FirstName @_user.LastName</MudText>
                <MudLink Style="text-decoration-color: #fff;" OnClick="@(()  => NavManager.NavigateTo($"/profile-overview/{_user!.Username}", true))">
                    <MudText Class="text-white" Typo="Typo.caption" Style="font-size: 14px;">@($"@{_user!.Username}")</MudText>
                </MudLink>
            </div>
        </div>
        <MudDivider Class="my-2 mt-3" DividerType="DividerType.FullWidth" Style="border-color: #424242!important;"/>
        <MudMenuItem Class="my-0 text-white c-menu-item" Href="/profile">
            <MudIcon Class="text-white mr-3" Icon="@Hardcoded.PokeBallIcon"/>
            Compte Hama
        </MudMenuItem>
        <MudDivider Class="my-2 mt-3" DividerType="DividerType.FullWidth" Style="border-color: #424242!important;"/>
        <MudMenuItem Class="my-0 text-white c-menu-item" OnClick="@CopyToClipboardAsync"><MudIcon Class="text-white mr-3" Icon="@Icons.Share" /> Partager</MudMenuItem>
        <MudMenuItem Class="my-0 text-white c-menu-item" OnClick="@Logout">
            <MudIcon Class="text-white mr-3" Icon="@Icons.Logout"/>
            Se déconnecter
        </MudMenuItem>
    </MudStack>
</MudMenu>

@code {
    [Inject] public IDbContextFactory<UtilityContext> UtilityFactory { get; set; } = null!;
    [Inject] public UserService UserService { get; set; } = null!;
    [Inject] public NavigationManager NavManager { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;

    private UserModel? _user;
    private UserData? _data;

    protected override async Task OnInitializedAsync()
    {
        await RefreshDataAsync();

        UserService.OnUserDataChanged += RefreshDataAsync;
    }

    private async Task RefreshDataAsync()
    {
        var utilityDb = await UtilityFactory.CreateDbContextAsync();
        var authenticationState = await AuthenticationStateTask;
        var username = authenticationState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Surname)?.Value ?? string.Empty;
        _user = utilityDb.Users.FirstOrDefault(x => x.Username == username);
        _data = utilityDb.UsersData.FirstOrDefault(x => x.Username == username);

        if (_user is null || _data is null)
        {
            NavManager.NavigateTo("/", true);
        }
    }

    private async Task CopyToClipboardAsync()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"pokehama.fr/profile-overview/{_user!.Username}");
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add("Lien copié dans le presse papier.", Severity.Success);
    }

    private void Logout() => NavManager.NavigateTo("/api/authenticate/logout", true);
}