@using BC = BCrypt.Net.BCrypt;

<MudDialog Class="tabpanel-bg">
    <TitleContent>
        <MudStack Class="mt-n2" Row AlignItems="AlignItems.Center" Spacing="0">
            <MudText Typo="Typo.h6" Class="text-white pixelify">Modification de votre mot de passe</MudText>
            <MudSpacer />
            <MudIconButton Class="text-white hoverable-circle mr-n4" Icon="@Icons.Close" OnClick="@(() => Dialog.Close())"/>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="_oldPassword" Class="white-all pixelify mb-2" Variant="Variant.Filled" Label="Ancien mot de passe"
                      Adornment="Adornment.End" AdornmentIcon="@OldPasswordIcon" InputType="OldPasswordInput" OnAdornmentClick="@(() => _oldShown = !_oldShown)"/>
        <MudTextField T="string" @bind-Value="_password" Class="white-all pixelify mt-2" Variant="Variant.Filled" Label="Nouveau mot de passe"
                      Adornment="Adornment.End" AdornmentIcon="@PasswordIcon" InputType="PasswordInput" OnAdornmentClick="@(() => _shown = !_shown)"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Tertiary" OnClick="@SubmitEdit">Enregistrer</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] public ISnackbar Snackbar { get; set; } = null!;
    [CascadingParameter] public MudDialogInstance Dialog { get; set; } = null!;
    [Parameter] public string OldPasswordHash { get; set; } = null!;

    private string _oldPassword = string.Empty;
    private string _password = string.Empty;

    private bool _oldShown;
    private bool _shown;

    public string OldPasswordIcon => _oldShown ? Icons.Visibility : Icons.VisibilityOff; 
    private string PasswordIcon => _shown ? Icons.Visibility : Icons.VisibilityOff;

    private InputType OldPasswordInput => _oldShown ? InputType.Text : InputType.Password;
    private InputType PasswordInput => _shown ? InputType.Text : InputType.Password;
    
    private void SubmitEdit()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        if (string.IsNullOrWhiteSpace(_password))
        {
            Snackbar.Add("Mot de passe saisi incorrect !", Severity.Error, options =>
            {
                options.VisibleStateDuration = 2000;
                options.ShowCloseIcon = false;
            });
            return;
        } 
        
        if (!BC.Verify(_oldPassword, OldPasswordHash))
        {
            Snackbar.Add("Ancien mot de passe invalide !", Severity.Error, options =>
            {
                options.VisibleStateDuration = 2000;
                options.ShowCloseIcon = false;
            });
            return;
        }
        
        if (_oldPassword == _password)
        {
            Snackbar.Add("Vous ne pouvez pas saisir le même mot de passe !", Severity.Error, options =>
            {
                options.VisibleStateDuration = 2000;
                options.ShowCloseIcon = false;
            });
            return;
        }

        Dialog.Close(_password);
    }
}