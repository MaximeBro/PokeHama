@using System.Timers
@using PokeHama.Services

<MudAppBar Fixed Class="yellow-bg">
    <MudIconButton Class="@_easterBallClass" Icon="@Hardcoded.PokeBallIcon" OnClick="@OnEasterBall" />
    <MudSpacer/>
    <MudButton Class="text-white mr-4 pixelify hoverable" Href="/">Pok√©Hama</MudButton>
    <MudButton Class="text-white mr-4 pixelify hoverable" OnClick="@Random">Random</MudButton>
    <MudMenu Class="white-all mr-4 rounded-0 pixelify hoverable" ListClass="nav-menu" Label="Mini games" EndIcon="@Icons.ArrowDropDown" ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
        <MudMenuItem Class="pixelify nav-menu-item" Href="/guess">Who's that pokemon ?</MudMenuItem>
    </MudMenu>
    @if (AuthenticationService.IsAuthenticated)
    {
        <MenuProfile />
    }
    else
    {
        <MudButton Class="white-all pixelify rounded-xl" StartIcon="@Icons.AccountCircle" Variant="Variant.Outlined" Href="/connexion" Style="border-color: white; border-width: 2px!important;">
            Connexion
        </MudButton>
    }
</MudAppBar>

@code {
    [Inject] public AuthenticationService AuthenticationService { get; set; } = null!;
    [Inject] public NavigationManager NavManager { get; set; } = null!;

    private int _easterBall = 0;
    private string _easterBallClass = "ball icon-hoverable";
    private Timer _ballTimer = new Timer(2950);

    protected override void OnInitialized()
    {
        AuthenticationService.OnSignOutAsync += async () => { await InvokeAsync(StateHasChanged); NavManager.NavigateTo("/", true); };
    }

    private void Random()
    {
        var id = new Random().Next(1, 808);
        NavManager.NavigateTo($"/overview/{id}", true);
    }

    private void OnEasterBall()
    {
        _easterBall++;
        if (_easterBall % 5 == 0 && !_ballTimer.Enabled)
        {
            _easterBallClass = "easter-ball icon-hoverable";
            _ballTimer.Elapsed += Stop;
            _ballTimer.Start();
        }
    }

    private void Stop(object? sender, ElapsedEventArgs e)
    {
        if (_ballTimer.Enabled)
        {
            _easterBallClass = "ball";
            _ballTimer.Stop();
            _ballTimer.Elapsed -= Stop;
            _ = InvokeAsync(StateHasChanged);
        }
    }
}